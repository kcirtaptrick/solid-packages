#!/usr/bin/env node

// @ts-check
/* eslint-disable */

const fs = require("fs");
const util = require("util");
const exec = util.promisify(require("child_process").exec);
const path = require("path");
const isCI = require("is-ci");
const prettier = require("prettier");

const tsconfig = require("../tsconfig.json");

tsconfig.files = [];
tsconfig.references = [];

const prettierrc = JSON.parse(
  fs.readFileSync(path.resolve(__dirname, "../.prettierrc")).toString("utf-8")
);

const format = (input) =>
  prettier.format(input, {
    parser: "json",
    ...prettierrc,
  });

(async () => {
  if (isCI) {
    // dont run it on CI
    return;
  }

  const { stdout } = await exec("yarn workspaces info --json");

  let lines = stdout.trim().split("\n");
  if (!lines[0].trim().startsWith("{")) {
    lines = lines.slice(1, -1);
  }
  const depthTree = lines.join("\n");
  const workspaces = JSON.parse(depthTree);

  for (const name in workspaces) {
    const workspace = workspaces[name];
    const location = path.resolve(process.cwd(), workspace.location);
    const tsconfigPath = path.resolve(location, "tsconfig.json");
    if (fs.existsSync(tsconfigPath)) {
      tsconfig.references.push({
        path: workspace.location,
      });
      const workspaceConfig = require(path.relative(__dirname, tsconfigPath));
      workspaceConfig.compilerOptions.composite = true;
      workspaceConfig.references = [];
      for (const dependency of workspace.workspaceDependencies) {
        const dependecyLocation = path.resolve(
          process.cwd(),
          workspaces[dependency].location
        );
        if (fs.existsSync(path.resolve(dependecyLocation, "tsconfig.json"))) {
          workspaceConfig.references.push({
            path: path.relative(location, dependecyLocation),
          });
        }
      }
      fs.writeFileSync(
        tsconfigPath,
        format(JSON.stringify(workspaceConfig, undefined, 4))
      );
    }
  }
  fs.writeFileSync(
    "tsconfig.json",
    format(JSON.stringify(tsconfig, undefined, 4))
  );
})();
