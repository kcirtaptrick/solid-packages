{
  "Create composable solid signal": {
    "prefix": "signal",
    "body": [
      "import { createSignal, Signal } from \"solid-js\";",
      "import { signalExtender, SolidSignal } from \"../../../utils/signal.js\";",
      "",
      "declare namespace create${1:Something} {",
      "  export type Extensions<T extends $2> = [",
      "    {},",
      "    {",
      "      $3",
      "    }",
      "  ];",
      "",
      "  export type Type<",
      "    T extends ${2:{\\}},",
      "    Base extends [{}, {}] = [{}, {}]",
      "  > = SolidSignal.Extended<T, Base & Extensions<T>>;",
      "",
      "  export type Result<",
      "    T extends $2,",
      "    Base extends [{}, {}] = [{}, {}]",
      "  > = ReturnType<Type<T, Base>>;",
      "}",
      "",
      "function create$1<T extends $2>(value: T, options?: SolidSignal.Options<T>) {",
      "  return create$1.wrap(createSignal(value, options));",
      "}",
      "",
      "create$1.wrap = <Sig extends Signal<$2>>(signal: Sig) => {",
      "  type T = Sig extends Signal<infer T> ? T : never;",
      "  ",
      "  return signalExtender(signal).extend<createObject.Extensions<T>>(",
      "    ([state, setState]) => [",
      "      {},",
      "      {",
      "        $0",
      "      },",
      "    ]",
      "  );",
      "};",
      "",
      "export default create$1;",
      ""
    ],
    "description": "Create composable solid signal"
  }
}
