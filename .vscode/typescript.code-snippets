{
  "Create composable solid signal": {
    "prefix": "signal",
    "body": [
      "import { createSignal, Signal } from \"solid-js\";",
      "import { SignalOptions } from \"solid-js/types/reactive/signal\";",
      "",
      "declare namespace create${1:Some}Signal {",
      "  export type Extension<T> = {",
      "    $3",
      "  }",
      "  export type Type<T extends ${2:{\\}}, Base = {}> = createSignal.ExtendedSetter<",
      "    T,",
      "    Base & Extension<T>",
      "  >;",
      "",
      "  export type Result<T extends $2, Base = {}> = ReturnType<Type<T, Base>>;",
      "}",
      "",
      "function create$1Signal<T extends $2>(value: T, options?: SignalOptions<T>) {",
      "  return create$1Signal.wrap(createSignal(value, options));",
      "}",
      "",
      "create$1Signal.wrap = <Sig extends Signal<$2>>([",
      "  state,",
      "  setState,",
      "]: Sig) => {",
      "  type T = Sig extends Signal<infer T> ? T : never;",
      "",
      "  const extension: create$1Signal.Extension<T> = { ",
      "    $0",
      "  };",
      "  const set$1State = Object.assign(setState, extension);",
      "",
      "  type Base = createSignal.ExtendedSetter.ExtensionType<Sig>;",
      "",
      "  return [state, set$1State] as create$1Signal.Result<T, Base>;",
      "};",
      "",
      "export default create$1Signal;",
      ""
    ],
    "description": "Create composable solid signal"
  }
}
